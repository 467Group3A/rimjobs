//modules
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
var path = require('path');
const router = express.Router();
const promise = require('mysql2/promise');

const port = 4050;

const { loadInventory } = require('./services/loadinventory')
const { legacyConnection, newConnection } = require('./services/dbconfig')

const app = express();

//Handle HTTP POST requests
app.use(bodyParser.urlencoded({ extended: true }));

app.use(express.json());

app.engine('html', require('ejs').renderFile);
app.set('view engine', 'html');

app.use(
  express.urlencoded({
    extended: true,
  })
);

// CSS and image files
app.use(express.static(path.join(__dirname, 'assets')));

// Vue Component files
app.use(express.static(path.join(__dirname, 'components')));

// legacy database info
const connection = mysql.createConnection({
  host: 'blitz.cs.niu.edu',
  user: 'student',
  password: 'student',
  database: 'csci467',
});

// Connect to legacy database 
connection.connect((error) => {
  if (error) {
    console.error('Error connecting to database:', error);
  } else {
    console.log('Connected to database successfully!');
  }
});

// Get all info from database
function getAllParts() {
  return new Promise((resolve, reject) => {
    connection.query('SELECT * FROM parts', function (error, results, fields) {
      if (error) {
        reject(error);
      } else {
        resolve(results);
      }
    });
  });
}

//endpoint for parts page
app.get('/parts', async (req, res) => {
  try {
    const results = await getAllParts();
    const cartTotal = products.length;
    res.render('parts', { parts: results, cartTotal, cartItems: products });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error retrieving parts');
  }
});

// TODO: Fix Render. It keeps saying theres no renderer chosen
//GET request for cart page
// app.get('/cart', (req, res) => {
//     const cartTotal = products.length;
//     res.render('cart', {cartItems: products, cartTotal});
// });

//parts endpoint
const products = [];
app.post('/parts', (req, res) => {
  const number = req.body.number;
  const description = req.body.description;
  const price = req.body.price;
  const weight = req.body.weight;
  const image = req.body.image;
  const quantity = req.body.quantity;

  // add the product to the products array
  products.push({
    number: number,
    description: description,
    price: price,
    weight: weight,
    image: image,
    quantity: quantity
  });

  res.redirect('/parts');
});


// If url is /, send the index.html file
app.get("/", (req, res) => {
  //send the index.html file for all requests
  res.sendFile(__dirname + "/views/index.html");
});

// If url is /viewinventory, send the viewinventory.html file
app.get('/viewinventory', (req, res) => {
  res.sendFile(__dirname + "/views/viewinventory.html");
})

// Sends back json objects that combine legacy parts with a random inventory amount generated by loadinventory()
app.get('/legacyparts', async (req, res) => {
  const perPage = 30; // Change this value as needed
  const page = req.query.page || 1;
  const offset = (page - 1) * perPage;

  // Query the database with the requested offset
  connection.query(`SELECT * FROM parts LIMIT ${perPage} OFFSET ${offset}`, (error, results) => {
    if (error) {
      console.error(error);
      res.status(500).send('Error retrieving data from database');
    } else {
      res.send(results);
    }
  });
});

app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500;
  console.error(err.message, err.stack);
  res.status(statusCode).json({ message: err.message });
  return;
});

// Displays the port number the server is listening on
app.listen(port, () => {
  console.log(`Node Server listening at http://45.33.66.75:${port}`);
  // Populate inventory in new db using legacy part ids
  // Could do when server runs or manually/scheduled run it in future
  //loadInventory()
});

